from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render, redirect
from django.urls import reverse, reverse_lazy
from django.contrib.auth import authenticate
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.auth import logout, login
from django.contrib.auth.views import LoginView, PasswordChangeView, PasswordResetView, PasswordResetConfirmView

from design.views.base import BaseView


class Login(BaseView, LoginView):
    template_name = 'user/login.html'

    def get_context_data(self, **kwargs):
        context_data = super().get_context_data(**kwargs)
        context_data.update(self.context)
        return context_data

class Logout(BaseView):

    title = 'logout'
    def get(self, request):
        if request.user.is_authenticated:
            logout(request)
        return redirect('homepage')

class PasswordChange(BaseView, PasswordChangeView):
    template_name = 'user/password_change.html'
    success_url = reverse_lazy('homepage') #TODO: add dedicated success page

    # pass the context generated by the baseview to the passwordchangeview
    def get_context_data(self, **kwargs):
        context_data = super().get_context_data(**kwargs)
        context_data.update(self.context)
        return context_data

class PasswordReset(BaseView, PasswordResetView):
    template_name = 'user/password_reset.html'
    success_url = reverse_lazy('password_reset_done')

    # pass the context generated by the baseview to the passwordchangeview
    def get_context_data(self, **kwargs):
        context_data = super().get_context_data(**kwargs)
        context_data.update(self.context)
        return context_data

class PasswordResetConfirm(BaseView, PasswordResetConfirmView):
    template_name = 'user/password_reset_confirm.html'
    # pass the context generated by the baseview to the passwordchangeview
    def get_context_data(self, **kwargs):
        context_data = super().get_context_data(**kwargs)
        context_data.update(self.context)
        return context_data

class PasswordResetDone(BaseView):
    title = 'Reset done'
    def get(self, request):
        self.context['header'] = "We have sent you an email"
        self.context['message'] = "Please check your inbox" 
        return render(request, 'generic_message.html', self.context)

class PasswordResetComplete(BaseView):
    title = 'Reset done'
    def get(self, request):
        self.context['header'] = "Done"
        self.context['message'] = "You have resetted your password" 
        return render(request, 'generic_message.html', self.context)
    






